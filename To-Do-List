#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_TASKS 100
#define TASK_LENGTH 50

struct Task {
    char description[TASK_LENGTH];
    int completed;
};

struct Task todoList[MAX_TASKS];
int taskCount = 0;

// Function to add a task to the to-do list
void addTask() {
    if (taskCount < MAX_TASKS) {
        printf("Enter a task description: ");
        scanf(" %[^\n]", todoList[taskCount].description);
        todoList[taskCount].completed = 0; // Initialize as not completed
        taskCount++;
        printf("Task added!\n");
    } else {
        printf("To-Do list is full. Cannot add more tasks.\n");
    }
}

// Function to remove a task from the to-do list
void removeTask() {
    if (taskCount > 0) {
        int taskIndex;
        printf("Enter the index of the task to remove (0-%d): ", taskCount - 1);
        scanf("%d", &taskIndex);

        if (taskIndex >= 0 && taskIndex < taskCount) {
            for (int i = taskIndex; i < taskCount - 1; i++) {
                strcpy(todoList[i].description, todoList[i + 1].description);
                todoList[i].completed = todoList[i + 1].completed;
            }
            taskCount--;
            printf("Task removed!\n");
        } else {
            printf("Invalid task index. Please enter a valid index.\n");
        }
    } else {
        printf("To-Do list is empty. Nothing to remove.\n");
    }
}

// Function to list all tasks
void listTasks() {
    if (taskCount > 0) {
        printf("To-Do List:\n");
        for (int i = 0; i < taskCount; i++) {
            printf("%d. [%s] %s\n", i, (todoList[i].completed ? "X" : " "), todoList[i].description);
        }
    } else {
        printf("To-Do list is empty.\n");
    }
}

int main() {
    int choice;

    do {
        printf("\nTo-Do List Application\n");
        printf("1. Add Task\n");
        printf("2. Remove Task\n");
        printf("3. List Tasks\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addTask();
                break;
            case 2:
                removeTask();
                break;
            case 3:
                listTasks();
                break;
            case 4:
                printf("Exiting the To-Do List Application.\n");
                break;
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    } while (choice != 4);

    return 0;
}
